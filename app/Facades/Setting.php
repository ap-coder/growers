<?php

namespace App\Facades;

use Illuminate\Support\Facades\Facade;

/**
 * @method static fill(array $attributes)
 * @method static forceFill(array $attributes)
 * @method static qualifyColumn($column)
 * @method static qualifyColumns($columns)
 * @method static newInstance($attributes = [], $exists = false)
 * @method static newFromBuilder($attributes = [], $connection = null)
 * @method static load($relations)
 * @method static loadMorph($relation, $relations)
 * @method static loadMissing($relations)
 * @method static loadAggregate($relations, $column, $function = null)
 * @method static loadCount($relations)
 * @method static loadMax($relations, $column)
 * @method static loadMin($relations, $column)
 * @method static loadSum($relations, $column)
 * @method static loadAvg($relations, $column)
 * @method static loadExists($relations)
 * @method static loadMorphAggregate($relation, $relations, $column, $function = null)
 * @method static loadMorphCount($relation, $relations)
 * @method static loadMorphMax($relation, $relations, $column)
 * @method static loadMorphMin($relation, $relations, $column)
 * @method static loadMorphSum($relation, $relations, $column)
 * @method static loadMorphAvg($relation, $relations, $column)
 * @method static update(array $attributes = [], array $options = [])
 * @method static updateOrFail(array $attributes = [], array $options = [])
 * @method static updateQuietly(array $attributes = [], array $options = [])
 * @method static push()
 * @method static pushQuietly()
 * @method static saveQuietly(array $options = [])
 * @method static save(array $options = [])
 * @method static saveOrFail(array $options = [])
 * @method static delete()
 * @method static deleteQuietly()
 * @method static deleteOrFail()
 * @method static forceDelete()
 * @method static newQuery()
 * @method static newModelQuery()
 * @method static newQueryWithoutRelationships()
 * @method static registerGlobalScopes($builder)
 * @method static newQueryWithoutScopes()
 * @method static newQueryWithoutScope($scope)
 * @method static newQueryForRestoration($ids)
 * @method static newEloquentBuilder($query)
 * @method static newCollection(array $models = [])
 * @method static newPivot(self $parent, array $attributes, $table, $exists, $using = null)
 * @method static hasNamedScope($scope)
 * @method static callNamedScope($scope, array $parameters = [])
 * @method static toArray()
 * @method static toJson($options = 0)
 * @method static mixed jsonSerialize()
 * @method static fresh($with = [])
 * @method static refresh()
 * @method static replicate(null|array $except = null)
 * @method static replicateQuietly(null|array $except = null)
 * @method static is($model)
 * @method static isNot($model)
 * @method static getConnection()
 * @method static getConnectionName()
 * @method static setConnection($name)
 * @method static getTable()
 * @method static setTable($table)
 * @method static getKeyName()
 * @method static setKeyName($key)
 * @method static getQualifiedKeyName()
 * @method static getKeyType()
 * @method static setKeyType($type)
 * @method static getIncrementing()
 * @method static setIncrementing($value)
 * @method static getKey()
 * @method static getQueueableId()
 * @method static getQueueableRelations()
 * @method static getQueueableConnection()
 * @method static getRouteKey()
 * @method static getRouteKeyName()
 * @method static resolveRouteBinding($value, $field = null)
 * @method static resolveSoftDeletableRouteBinding($value, $field = null)
 * @method static resolveChildRouteBinding($childType, $value, $field)
 * @method static resolveSoftDeletableChildRouteBinding($childType, $value, $field)
 * @method static resolveRouteBindingQuery($query, $value, $field = null)
 * @method static getForeignKey()
 * @method static getPerPage()
 * @method static setPerPage($perPage)
 * @method static broadcastChannelRoute()
 * @method static broadcastChannel()
 * @method static bool offsetExists($offset)
 * @method static mixed offsetGet($offset)
 * @method static void offsetSet($offset, $value)
 * @method static void offsetUnset($offset)
 * @method static __isset($key)
 * @method static __unset($key)
 * @method static escapeWhenCastingToString($escape = true)
 * @method static __sleep()
 * @method static __wakeup()
 * @method static attributesToArray()
 * @method static relationsToArray()
 * @method static getAttribute($key)
 * @method static getAttributeValue($key)
 * @method static getRelationValue($key)
 * @method static isRelation($key)
 * @method static hasGetMutator($key)
 * @method static hasAttributeMutator($key)
 * @method static hasAttributeGetMutator($key)
 * @method static mergeCasts($casts)
 * @method static setAttribute($key, $value)
 * @method static hasSetMutator($key)
 * @method static hasAttributeSetMutator($key)
 * @method static fillJsonAttribute($key, $value)
 * @method static fromJson($value, $asObject = false)
 * @method static fromEncryptedString($value)
 * @method static fromFloat($value)
 * @method static fromDateTime($value)
 * @method static getDates()
 * @method static getDateFormat()
 * @method static setDateFormat($format)
 * @method static hasCast($key, $types = null)
 * @method static getCasts()
 * @method static getAttributes()
 * @method static setRawAttributes(array $attributes, $sync = false)
 * @method static getOriginal($key = null, $default = null)
 * @method static getRawOriginal($key = null, $default = null)
 * @method static only($attributes)
 * @method static syncOriginal()
 * @method static syncOriginalAttribute($attribute)
 * @method static syncOriginalAttributes($attributes)
 * @method static syncChanges()
 * @method static isDirty($attributes = null)
 * @method static isClean($attributes = null)
 * @method static discardChanges()
 * @method static wasChanged($attributes = null)
 * @method static getDirty()
 * @method static getChanges()
 * @method static originalIsEquivalent($key)
 * @method static append($attributes)
 * @method static getAppends()
 * @method static setAppends(array $appends)
 * @method static hasAppended($attribute)
 * @method static getMutatedAttributes()
 * @method static getObservableEvents()
 * @method static setObservableEvents(array $observables)
 * @method static addObservableEvents($observables)
 * @method static removeObservableEvents($observables)
 * @method static getGlobalScopes()
 * @method static relationResolver($class, $key)
 * @method static hasOne($related, $foreignKey = null, $localKey = null)
 * @method static hasOneThrough($related, $through, $firstKey = null, $secondKey = null, $localKey = null, $secondLocalKey = null)
 * @method static morphOne($related, $name, $type = null, $id = null, $localKey = null)
 * @method static belongsTo($related, $foreignKey = null, $ownerKey = null, $relation = null)
 * @method static morphTo($name = null, $type = null, $id = null, $ownerKey = null)
 * @method static through($relationship)
 * @method static hasMany($related, $foreignKey = null, $localKey = null)
 * @method static hasManyThrough($related, $through, $firstKey = null, $secondKey = null, $localKey = null, $secondLocalKey = null)
 * @method static morphMany($related, $name, $type = null, $id = null, $localKey = null)
 * @method static belongsToMany($related, $table = null, $foreignPivotKey = null, $relatedPivotKey = null, $parentKey = null, $relatedKey = null, $relation = null)
 * @method static morphToMany($related, $name, $table = null, $foreignPivotKey = null, $relatedPivotKey = null, $parentKey = null, $relatedKey = null, $relation = null, $inverse = false)
 * @method static morphedByMany($related, $name, $table = null, $foreignPivotKey = null, $relatedPivotKey = null, $parentKey = null, $relatedKey = null, $relation = null)
 * @method static joiningTable($related, $instance = null)
 * @method static joiningTableSegment()
 * @method static touches($relation)
 * @method static touchOwners()
 * @method static getMorphClass()
 * @method static getRelations()
 * @method static getRelation($relation)
 * @method static relationLoaded($key)
 * @method static setRelation($relation, $value)
 * @method static unsetRelation($relation)
 * @method static setRelations(array $relations)
 * @method static withoutRelations()
 * @method static unsetRelations()
 * @method static getTouchedRelations()
 * @method static setTouchedRelations(array $touches)
 * @method static touch($attribute = null)
 * @method static touchQuietly($attribute = null)
 * @method static updateTimestamps()
 * @method static setCreatedAt($value)
 * @method static setUpdatedAt($value)
 * @method static freshTimestamp()
 * @method static freshTimestampString()
 * @method static usesTimestamps()
 * @method static getCreatedAtColumn()
 * @method static getUpdatedAtColumn()
 * @method static getQualifiedCreatedAtColumn()
 * @method static getQualifiedUpdatedAtColumn()
 * @method static usesUniqueIds()
 * @method static setUniqueIds()
 * @method static newUniqueId()
 * @method static uniqueIds()
 * @method static getHidden()
 * @method static setHidden(array $hidden)
 * @method static getVisible()
 * @method static setVisible(array $visible)
 * @method static makeVisible($attributes)
 * @method static makeVisibleIf($condition, $attributes)
 * @method static makeHidden($attributes)
 * @method static makeHiddenIf($condition, $attributes)
 * @method static getFillable()
 * @method static fillable(array $fillable)
 * @method static mergeFillable(array $fillable)
 * @method static getGuarded()
 * @method static guard(array $guarded)
 * @method static mergeGuarded(array $guarded)
 * @method static isFillable($key)
 * @method static isGuarded($key)
 * @method static totallyGuarded()
 * @method static initializeSoftDeletes()
 * @method static forceDeleteQuietly()
 * @method static restore()
 * @method static restoreQuietly()
 * @method static trashed()
 * @method static isForceDeleting()
 * @method static getDeletedAtColumn()
 * @method static getQualifiedDeletedAtColumn()
 */
class Setting extends Facade
{
    protected static function getFacadeAccessor()
    {
        return 'setting';
    }
}
